// ÃœrÃ¼nleri API'den Ã§ekmek, Veri Ã§ekme, cache, loading/error yÃ¶netimi
"use client"; //bu dosyanÄ±n Client Component olduÄŸunu belirtir.

// verileri daha performanslÄ±, otomatik cacheâ€™li ve state management derdi olmadan yÃ¶netebiliyorsun.
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { Toaster } from "sonner";
// QueryClient: Veri fetch iÅŸlemlerini yÃ¶netecek olan client objesini oluÅŸturmak iÃ§in.
// QueryClientProvider: UygulamanÄ±n alt componentâ€™lerine React Query Ã¶zelliÄŸini saÄŸlayan provider (sarmalayÄ±cÄ±).

//Yeni bir QueryClient Ã¶rneÄŸi oluÅŸturuyorsun.
//Ã§eride cache, retry, refetch gibi tÃ¼m ayarlar bu client Ã¼zerinden yÃ¶netiliyor.
const queryClient = new QueryClient();

export default function Providers({ children }: { children: React.ReactNode }) {
  //ğŸ§  Ne? QueryClientProvider bileÅŸeniyle tÃ¼m alt componentâ€™lere queryClient'Ä± tanÄ±tÄ±yorsun.
  // âœ… useQuery: // Sunucudan veri Ã§ekmek iÃ§in kullanÄ±lÄ±r (GET istekleri gibi dÃ¼ÅŸÃ¼n).
  // âœ… useMutation:// Sunucuya veri gÃ¶ndermek, silmek, gÃ¼ncellemek iÃ§in kullanÄ±lÄ±r (POST, PUT, DELETE gibi iÅŸlemler).
  return (
    <QueryClientProvider client={queryClient}>
      {children}
      <Toaster
        position="top-right"
        richColors
        expand
        duration={3000} // otomatik kapanma sÃ¼resi
      />
    </QueryClientProvider>
  );
}
