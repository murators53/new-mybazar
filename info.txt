Harika ötesi Murat! 🎯  
Senin bu motivasyonun ve planlama tarzın, bu projeyi sadece bir "öğrenme deneyimi" değil, aynı zamanda LinkedIn’de dikkat çeken **portföy eseri** yapacak. Hadi şimdi projeyi tüm detaylarıyla yapılandıralım!

---

## 🚀 **PROJENİN ANA ÖZELLİKLERİ (Senin belirlediklerin + Tavsiyelerim)**

### ✅ Zaten planladığın harika özellikler:
- 🔐 JWT Auth (Access & Refresh Token – httpOnly cookie)
- 📱 Fully Responsive Design (Tailwind CSS + Mobil uyumlu yapı)
- 🛒 Real-Time Cart (Zustand veya Context + debounce)
- 🔎 Akıllı Arama ve Filtreleme (query string + dynamic filter logic)
- 🔄 React Query ile API senkronizasyonu + Cache
- ⚡️ Performans Odaklı Kodlama (Code Splitting, Memo, Lazy Load)
- 📄 8 Sayfa:
  - Login / Register
  - Homepage
  - Product Detail
  - Search Page
  - Profile Page
  - Category List
  - Cart

### 💡 Tavsiyelerim (Üst Düzey Portföy için)
| Özellik | Açıklama |
|--------|----------|
| 🎨 **Shadcn UI** | Modern, güzel, temiz component yapısı. Kurulmalı. |
| 🌐 **Dynamic Routes** | `/product/[id]`, `/category/[slug]`, `/search?q=...` |
| 🔎 **URL-based Filters** | Arama + filtreleme URL query parametreleriyle (örn: `/search?q=apple&price_min=10`) |
| 🧠 **Middleware Auth Control** | Dashboard, profile gibi sayfalarda erişim koruması |
| 🛡️ **Custom API Protection** | Backend route’larında `Authorization` header ile JWT kontrolü |
| 🌍 **Meta Tags (SEO Ready)** | `generateMetadata()` ile SSR meta tanımı |
| 💾 **Persist Cart** | Refresh sonrası cart boşalmamalı (localStorage + Zustand sync) |
| 📦 **Skeleton Loading** | Shimmer/skeleton UI bileşenleri ile daha iyi UX |
| 🌈 **Dark Mode Toggle** | Shadcn + Tailwind ile hızlıca eklenebilir (göze hoş görünür) |

---

## 📁 Dosya ve Sayfa Yapısı (Next.js 14 app router ile)

```
/app
  /login
  /register
  /search
  /cart
  /profile
  /category/[slug]
  /product/[id]
  /api
    /auth
    /products
    /cart
    /user
/components
  /ui (shadcn bileşenleri)
/lib
  auth.ts
  fetcher.ts
  jwt.ts
/store (zustand)
  authStore.ts
  cartStore.ts
/utils
  filters.ts
  priceFormatter.ts
```

---

## 🧭 Adım Adım Yol Haritası

1. **Proje Kurulumu**
   - Next.js 14.2.24 + App Router + Tailwind + Shadcn UI
   - ESLint + Prettier ayarları

2. **Layout & Navbar**
   - Responsive, mobil uyumlu header, cart ikonu, profil butonu vs.

3. **Auth Sistemi (JWT)**
   - Login/Register sayfaları
   - Backend `/api/auth` (manual JWT üretimi)
   - Refresh token + httpOnly cookie sistemi
   - Auth middleware

4. **Product API ile Veri Çekme**
   - dummyjson’dan ürün listesi, detay, kategori
   - React Query ile tüm veri çekimleri

5. **Sayfalar**
   - Home: Öne çıkan ürünler
   - Product Detail: `/product/[id]`
   - Search Page: `/search?q=...&category=...`
   - Cart: Zustand ile sepet yönetimi
   - Category List: `/category/[slug]`
   - Profile: Protected route

6. **Arama ve Filtreleme**
   - URL query parametrelerine bağlı filtre
   - debounce'lu input arama

7. **Performans Optimizasyonu**
   - Lazy import, memo, reselect
   - Skeleton UI

8. **Test & Yayın**
   - Vercel deployment
   - GitHub repo + etkili README
   - LinkedIn paylaşımlı tanıtım

---

İstersen ilk adım olarak, sana **Next.js 14 uyumlu proje başlatma + Shadcn kurulum adımları**yla başlayalım.  
Hazırsan başlıyoruz Murat, diyorsan "evet" de, birlikte kurmaya başlayalım 🔥

📦 4. ✅ Birkaç UI Bileşeni Kur (örn: Button + Input)
npx shadcn-ui@latest add button input
Bileşenler components/ui/ klasörüne gelir. Otomatik Tailwind uyumlu ve güzel stilli.

🧱 2. Navbar Component (Tailwind + Shadcn + Icon Ready)
🔧 Gerekli Paket: lucide-react (ikonlar için)
npm install lucide-react

/*
✅ Bu Store             Ne İşe Yarar?
🧠Ne yapar?	            Açıklama
🧠accessToken	        Giriş yapmış kullanıcıyı temsil eden token
🧠setAccessToken()	    Girişten sonra token'ı belleğe yazar
🧠clearAccessToken()	Çıkışta token'ı temizler
🧠useAuthStore()	    Bu hook'u her component'te çağırarak token'a erişebiliriz

🧠 Cevap: Çünkü Zustand (ve diğer tüm JS state yönetimi) 
sadece RAM'de tutulur.
🔁 Tarayıcı Sayfa Yenileme Mantığı:

    Senin Next.js frontend’in yükleniyor.

    Zustand içindeki veriler belleğe (RAM) yazılıyor:

useAuthStore.getState().accessToken = 'abc123';

Ama sayfa yenilenirse (F5):

    Tarayıcı tüm JS belleğini (RAM) sıfırlar ❌

    Zustand’daki tüm geçici veriler kaybolur ❌

    accessToken artık undefined/null olur

     Ne Kalıyor Geriye? → httpOnly refreshToken

Senin stratejin şu:
Durum	Kaynak	Açıklama
accessToken	RAM (zustand)	Yenileme sonrası silinir ❌
refreshToken	Tarayıcı çerezi (httpOnly)	Yenileme sonrası kalır ✅
*/

Harika Murat! 🔄  
Şimdi sistemimize bir "çıkış kapısı" ekliyoruz:  
**✅ Logout fonksiyonu (accessToken + refreshToken temizliği)**

---

## 🎯 Hedef:

| Adım | Ne olacak? |
|------|-------------|
| 1️⃣ | `accessToken` (RAM - Zustand) silinecek |
| 2️⃣ | `refreshToken` (httpOnly cookie) sunucudan temizlenecek |
| 3️⃣ | Kullanıcı `/login` sayfasına yönlendirilecek |

---

## ✅ 1. Logout API: `/api/auth/logout/route.ts`

📁 `app/api/auth/logout/route.ts`

```ts
import { NextResponse } from 'next/server';
import { cookies } from 'next/headers';

export async function POST() {
  const cookieStore = cookies();

  // refreshToken cookie’sini temizle
  cookieStore.set('refreshToken', '', {
    httpOnly: true,
    path: '/',
    expires: new Date(0),
  });

  return NextResponse.json({ message: 'Logged out successfully' });
}
```

---

## ✅ 2. Logout Butonu + Zustand Reset

📁 Örnek: `components/ui/UserMenu.tsx` gibi bir bileşen veya `Navbar` içine:

```tsx
'use client';

import { useRouter } from 'next/navigation';
import { useAuthStore } from '@/store/authStore';
import { Button } from '@/components/ui/button';

const LogoutButton = () => {
  const router = useRouter();
  const clearAccessToken = useAuthStore((s) => s.clearAccessToken);

  const handleLogout = async () => {
    await fetch('/api/auth/logout', { method: 'POST' });
    clearAccessToken(); // Zustand sıfırla
    router.push('/login');
  };

  return (
    <Button variant="outline" onClick={handleLogout}>
      Çıkış Yap
    </Button>
  );
};

export default LogoutButton;
```

> İpucu: Bu butonu `Navbar` içine veya `profile/page.tsx` altına ekleyebilirsin.

---

## ✅ Test Edilecek Akış

1. Login ol → `accessToken` geliyor → `/profile` sayfası açılıyor ✅  
2. Logout'a tıkla → cookie siliniyor, Zustand sıfırlanıyor ✅  
3. `/profile`'a gitmeye çalış → middleware seni `/login`'e yönlendiriyor ✅

---

## 🧠 Yapının Mantıksal Akışı Şu Anda Şöyle:

```plaintext
Login → Token'lar oluşturulur → Zustand + cookie
Yenileme → refreshToken ile yeni accessToken alınır
Middleware → refreshToken varsa erişim izni verilir
Logout → refreshToken silinir + Zustand reset
```

🔐 Şimdi sistemin temel auth yapısı taş gibi oturdu.

---

## 🔜 Sıradaki Adım: `Register` Sayfası

- Form → `/api/auth/register`
- Basit kullanıcı kaydı (şimdilik sahte DB)
- Kullanıcı kayıt sonrası otomatik login olabilir

Hazırsan “register ile devam et” diyebilirsin kral! 👑📥  
Yoksa search, cart ya da ürün sayfalarına da geçebiliriz. Seçim sende!

🧠 Yapının Mantıksal Akışı Şu Anda Şöyle:

Login → Token'lar oluşturulur → Zustand + cookie
Yenileme → refreshToken ile yeni accessToken alınır
Middleware → refreshToken varsa erişim izni verilir
Logout → refreshToken silinir + Zustand reset

2. Database Kullanıcısı Oluşturma
MongoDB senin için otomatik bir kullanıcı oluşturmuş:

Username: orsoglumurat

Password: hXMmrJpm9a8ZuypG ✅ Bu şifreyi kopyala veya bir yere not et.

İstersen kendi kullanıcı adını ve şifreni belirleyebilirsin ama bu haliyle de kullanabilirsin.

➡️ Tavsiye: İlk kurulum için bu otomatik kullanıcıyı kullanabilirsin.